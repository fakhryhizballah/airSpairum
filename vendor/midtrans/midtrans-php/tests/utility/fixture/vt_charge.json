{
  "transaction_details": {
    "order_id": "C17550",
    "gross_amount": 145000
  },

  "item_details" : [
    {
      "id": "a1",
      "price": 50000,
      "quantity": 2,
      "name": "Apel"
    },
    {
      "id": "a2",
      "price": 45000,
      "quantity": 1,
      "name": "Jeruk"
    }
  ],
  "customer_details": {
    "first_name": "Andri",
    "last_name": "Litani",
    "email": "andri@litani.com",
    "phone": "081122334455",
    "billing_address": {
        "first_name": "Andri",
        "last_name": "Litani",
        "address": "Mangga 20",
        "city": "Jakarta",
        "postal_code": "16602",
        "phone": "081122334455",
        "country_code": "IDN"
        },
    "shipping_address": {
        "first_name": "Obet",
        "last_name": "Supriadi",
        "address": "Manggis 90",
        "city": "Jakarta",
        "postal_code": "16601",
        "phone": "08113366345",
        "country_code": "IDN"
        }
    }
}
his->assertEquals($status_response->transaction_time, $charge_response->transaction_time);
        $this->assertEquals($status_response->status_message, 'Success, transaction is found');

        $this->assertTrue(isset($status_response->signature_key));
    }

    public function testCancelPermataVa()
    {
        $charge_params = VtChargeFixture::build(
            'bank_transfer',
            array(
                "bank" => "permata",
            )
        );
        $charge_response = CoreApi::charge($charge_params);
        $cancel_status_code = Transaction::cancel($charge_response->transaction_id);

        $this->assertEquals($cancel_status_code, '200');
    }

    public function testExpirePermataVa()
    {
        $charge_params = VtChargeFixture::build(
            'bank_transfer',
            array(
                "bank" => "permata",
            )
        );
        $charge_response = CoreApi::charge($charge_params);
        $expire = Transaction::expire($charge_response->transaction_id);

        $this->assertEquals($expire->status_code, '407');

        // Verify transaction via API
        $txn_status = Transaction::status($charge_response->transaction_id);
        $this->assertEquals($txn_status->status_code, "407");
        $this->assertEquals($txn_status->transaction_status, "expire");
    }
}
